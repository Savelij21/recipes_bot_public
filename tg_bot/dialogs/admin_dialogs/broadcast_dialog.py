import pprint

from aiogram.types import Message, ContentType, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Cancel, Button, Column, SwitchTo, Start
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.api.entities import MediaAttachment, MediaId

import logging
import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.dialogs.admin_dialogs_states import AdminModeBroadcastDialogSG, AdminModeScheduledJobsDialogSG
from filters.is_admin import IsAdmin
from utils.broadcaster_util import broadcast_start
from utils.admin_utils import get_broadcast_time_left_text
from external_services import django_api


logger = logging.getLogger(__name__)


# ========================================= BROADCAST TEXT WINDOWS ===============================================
# Handlers -----------------------------
async def process_newsletter_text(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    await message.chat.do('typing')
    dialog_manager.dialog_data.update({'text': message.text})
    msg = await message.answer('–í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await asyncio.sleep(1)
    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.check_text)
    await msg.delete()


async def process_newsletter_text_invalid(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    await message.chat.do('typing')
    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.invalid_text)


async def process_newsletter_text_success(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    await callback.message.chat.do('typing')
    await callback.message.edit_text('–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚òëÔ∏è')
    await asyncio.sleep(1)
    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.add_image_or_not)


# Getters ----------------------
async def newsletter_input_text_getter(dialog_manager: DialogManager, *args, **kwargs):
    return {'text': dialog_manager.dialog_data.get('text')}


# Windows ---------------------
text_input_window: Window = Window(
    Const('–í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n'
          '–î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>—Ç–µ–≥–∏</b>:\n\n\n'
          '&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt; - <b>–∂–∏—Ä–Ω—ã–π</b>\n\n'
          '&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt; - <i>–∫—É—Ä—Å–∏–≤</i>\n\n'
          '&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt; - <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n\n'
          '&lt;s&gt;–ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;s&gt; - <s>–ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>\n\n'
          '&lt;tg-spoiler&gt;—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç&lt;/tg-spoiler&gt; - <tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç</tg-spoiler>\n\n'
          '&lt;a href="https://smth.com"&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt; - <a href="https://smth.com">—Å—Å—ã–ª–∫–∞</a>\n'),
    MessageInput(
        func=process_newsletter_text,
        content_types=ContentType.TEXT
    ),
    MessageInput(
        func=process_newsletter_text_invalid,
        content_types=ContentType.ANY
    ),
    Cancel(
        text=Const('‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é'),
        id='back_to_admin_menu',
    ),
    state=AdminModeBroadcastDialogSG.start,
)

check_text_window: Window = Window(
    Format('{text}'),
    Column(
        Button(
            text=Const('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è'),
            id='continue',
            on_click=process_newsletter_text_success
        ),
        SwitchTo(
            text=Const('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úèÔ∏è'),
            id='edit',
            state=AdminModeBroadcastDialogSG.edit_text
        ),
        SwitchTo(
            text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
            id='cancel',
            state=AdminModeBroadcastDialogSG.cancel
        )
    ),
    state=AdminModeBroadcastDialogSG.check_text,
    getter=newsletter_input_text_getter
)

edit_text_window: Window = Window(
    Const('<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º–∏ —Ä–∞–Ω–µ–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ.</b>\n'
          '–î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>—Ç–µ–≥–∏</b>:\n\n\n'
          '&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt; - <b>–∂–∏—Ä–Ω—ã–π</b>\n\n'
          '&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt; - <i>–∫—É—Ä—Å–∏–≤</i>\n\n'
          '&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt; - <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n\n'
          '&lt;s&gt;–ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;s&gt; - <s>–ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>\n\n'
          '&lt;tg-spoiler&gt;—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç&lt;/tg-spoiler&gt; - <tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç</tg-spoiler>\n\n'
          '&lt;a href="https://smth.com"&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt; - <a href="https://smth.com">—Å—Å—ã–ª–∫–∞</a>\n'),
    MessageInput(
        func=process_newsletter_text,
        content_types=ContentType.TEXT
    ),
    MessageInput(
        func=process_newsletter_text_invalid,
        content_types=ContentType.ANY
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.edit_text
)

invalid_text_window: Window = Window(
    Const('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'),
    MessageInput(
        func=process_newsletter_text,
        content_types=ContentType.TEXT
    ),
    MessageInput(
        func=process_newsletter_text_invalid,
        content_types=ContentType.ANY
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.invalid_text
)


# ================================ IMAGE ADDING WINDOWS ====================================================
# Handlers ----------------------
async def process_add_image(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    await message.chat.do('typing')
    dialog_manager.dialog_data.update({'file_id': message.photo[-1].file_id})
    msg = await message.answer('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚òëÔ∏è')
    await asyncio.sleep(2)
    await msg.edit_text('–ö–æ–Ω–µ—á–Ω—ã–π –≤–∏–¥ —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await asyncio.sleep(2)
    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.finish_view)
    await msg.delete()


async def process_add_image_invalid(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    await message.chat.do('typing')
    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.invalid_image)


async def process_finish_view(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    await callback.message.chat.do('typing')
    await callback.message.edit_text('–ö–æ–Ω–µ—á–Ω—ã–π –≤–∏–¥ —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await asyncio.sleep(2)
    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.finish_view)


# Getters -----------------------

# Windows -----------------------
add_img_or_not_window: Window = Window(
    Const('–ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? üñº'),
    SwitchTo(
        text=Const('–î–æ–±–∞–≤–∏—Ç—å ‚ÜóÔ∏è'),
        id='add_image',
        state=AdminModeBroadcastDialogSG.add_image
    ),
    Button(
        text=Const('–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚û°Ô∏è'),
        id='no_image',
        on_click=process_finish_view
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.add_image_or_not
)

upload_img_window: Window = Window(
    Const('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'),
    MessageInput(
        func=process_add_image,
        content_types=ContentType.PHOTO
    ),
    MessageInput(
        func=process_add_image_invalid,
        content_types=ContentType.ANY
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.add_image
)

invalid_img_window: Window = Window(
    Const('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ <b>–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'),
    MessageInput(
        func=process_add_image,
        content_types=ContentType.PHOTO
    ),
    MessageInput(
        func=process_add_image_invalid,
        content_types=ContentType.ANY
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.invalid_image
)


# =========================================== FINISH VIEW WINDOWS ===================================================
# Handlers --------------------
async def start_broadcast_now(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    await broadcast_start(
        admin_id=callback.from_user.id,
        bot=callback.bot,
        text=dialog_manager.dialog_data.get('text'),
        image=dialog_manager.dialog_data.get('file_id'),
        state=dialog_manager.middleware_data.get('state')
    )
    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –∫ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º
    await dialog_manager.reset_stack()


# Getters ---------------------
async def finish_view_getter(dialog_manager: DialogManager, *args, **kwargs):
    image_file_id = dialog_manager.dialog_data.get('file_id')
    if image_file_id:
        image = MediaAttachment(
            type=ContentType.PHOTO,
            file_id=MediaId(image_file_id)
        )
    else:
        image = None

    return {
        'image': image,
        'text': dialog_manager.dialog_data.get('text')
    }


async def finish_creation_getter(dialog_manager: DialogManager, *args, **kwargs):
    users_stats = await django_api.get_users_stats()

    return {
        'all': users_stats['all'],
        'subscribed': users_stats['subscribed'],
        'unsubscribed': users_stats['unsubscribed'],
        'send_time': get_broadcast_time_left_text(users_stats['subscribed'])
    }


# Windows ---------------------
finish_view_window: Window = Window(
    DynamicMedia(
        selector='image',
        when='image'
    ),
    Format(
        text='{text}'
    ),
    SwitchTo(
        text=Const('–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ üì©'),
        id='ready_to_send',
        state=AdminModeBroadcastDialogSG.finish_creation
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.finish_view,
    getter=finish_view_getter
)

creation_type_window: Window = Window(
    Format('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: <b>{all}</b>\n'
           '<u>–ê–∫—Ç–∏–≤–Ω—ã–µ</u>: <b>{subscribed}</b>\n'
           '<u>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</u>: <b>{unsubscribed}</b>\n\n'
           '–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ <u>–∞–∫—Ç–∏–≤–Ω—ã–º</u> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n'
           '–†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: <b>{send_time}</b>'),
    SwitchTo(
        text=Const('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚è∞'),
        id='schedule_broadcast',
        state=AdminModeBroadcastDialogSG.input_schedule_time
    ),
    Button(
        text=Const('–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì®'),
        id='start_broadcast',
        on_click=start_broadcast_now
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.finish_creation,
    getter=finish_creation_getter
)


# =========================================== SCHEDULING WINDOWS ===================================================
# Handlers -------------------
async def process_time_input(message: Message, widget: MessageInput, dialog_manager: DialogManager):
    await message.chat.do('typing')

    try:
        dt = datetime.strptime(
            f'{datetime.now().strftime("%Y-%m-%d")} {message.text}',
            '%Y-%m-%d %H:%M'
        )
    except ValueError:
        msg = await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!')
        await asyncio.sleep(2)
        await msg.delete()
        return

    if dt < datetime.now():
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!')
        await asyncio.sleep(2)
        await msg.delete()
        return

    dialog_manager.dialog_data.update({'schedule_time': dt})
    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.check_schedule_time)


async def schedule_broadcast(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    schedule_time: datetime = dialog_manager.dialog_data.get('schedule_time')
    scheduler: AsyncIOScheduler = dialog_manager.middleware_data.get('scheduler')

    scheduler.add_job(
        id=f'schedule_broadcast__{(schedule_time.strftime("%Y%m%d_%H%M%S"))}',
        func=broadcast_start,
        trigger='date',
        run_date=schedule_time,
        kwargs={
            'admin_id': callback.from_user.id,
            'bot': callback.bot,
            'text': dialog_manager.dialog_data.get('text'),
            'image': dialog_manager.dialog_data.get('file_id'),
            'state': dialog_manager.middleware_data.get('state')
        }
    )

    logger.info(f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è: {schedule_time.strftime("%Y-%m-%d %H:%M:%S")}')

    await dialog_manager.switch_to(AdminModeBroadcastDialogSG.scheduled_broadcast_registered)
    return


# Getters ----------------------
async def check_schedule_time_getter(dialog_manager: DialogManager, *args, **kwargs):
    schedule_time: datetime = dialog_manager.dialog_data.get('schedule_time')
    time_left = round((schedule_time - datetime.now()).total_seconds())
    return {
        'schedule_time': schedule_time.strftime("%d.%m.%Y %H:%M"),
        'left_hours': time_left // 3600,
        'left_minutes': (time_left % 3600) // 60,
        'left_seconds': (time_left % 3600) % 60
    }


async def scheduled_broadcast_registered_getter(dialog_manager: DialogManager, *args, **kwargs):
    return {
        'schedule_time': dialog_manager.dialog_data.get('schedule_time')
    }


# Windows -----------------------
schedule_time_input_window: Window = Window(
    Const('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ú–°–ö (–ø—Ä–∏–º–µ—Ä: 13:45):'),
    MessageInput(
        func=process_time_input,
        content_types=ContentType.TEXT
    ),
    state=AdminModeBroadcastDialogSG.input_schedule_time
)

check_schedule_time_window: Window = Window(
    Format(
        '–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {schedule_time}\n'
        '(—á–µ—Ä–µ–∑ {left_hours} —á–∞—Å–æ–≤, {left_minutes} –º–∏–Ω—É—Ç, {left_seconds} —Å–µ–∫—É–Ω–¥)'
    ),
    Button(
        text=Const('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å'),
        id='schedule',
        on_click=schedule_broadcast
    ),
    SwitchTo(
        text=Const('‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'),
        id='cancel',
        state=AdminModeBroadcastDialogSG.cancel
    ),
    state=AdminModeBroadcastDialogSG.check_schedule_time,
    getter=check_schedule_time_getter
)

success_schedule_window: Window = Window(
    Format('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {schedule_time} ‚è≥'),
    Start(
        text=Const('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏'),
        id='go_to_broadcast_scheduled_jobs',
        state=AdminModeScheduledJobsDialogSG.broadcast_jobs
    ),
    Cancel(
        text=Const('‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é'),
        id='back_to_admin_menu',
    ),
    state=AdminModeBroadcastDialogSG.scheduled_broadcast_registered,
    getter=scheduled_broadcast_registered_getter
)


# ================================================ CANCELLED BROADCASTING WINDOW ================================
# Handlers -------------

# Getters ---------------

# Window ----------------
canceled_broadcasting: Window = Window(
    Const('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå'),
    Cancel(
        text=Const('‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é'),
        id='back_to_admin_menu',
    ),
    state=AdminModeBroadcastDialogSG.cancel
)


# =============================================== DIALOG ==================================================
broadcast_dialog = Dialog(
    # text input
    text_input_window,
    check_text_window,
    edit_text_window,
    invalid_text_window,
    # image
    add_img_or_not_window,
    upload_img_window,
    invalid_img_window,
    # finish view
    finish_view_window,
    creation_type_window,
    # schedule
    schedule_time_input_window,
    check_schedule_time_window,
    success_schedule_window,
    # cancel
    canceled_broadcasting
)


# Filters -------------------------------
broadcast_dialog.message.filter(IsAdmin())
broadcast_dialog.callback_query.filter(IsAdmin())
